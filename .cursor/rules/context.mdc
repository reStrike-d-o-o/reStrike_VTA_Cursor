# reStrike VTA - Windows-Only Project Context Rules

## Latest Development Status (2025-01-28):
- ‚úÖ Windows-only, production-ready, Rust+React (Tauri) application
- ‚úÖ Docker/devcontainer fully removed from all onboarding, docs, and scripts
- ‚úÖ Modular, plugin-based Rust backend (AppResult/AppError, crate naming, import style)
- ‚úÖ React 18 frontend with IOC flag system, advanced UI/UX
- ‚úÖ All onboarding, build, and documentation reference Windows-native setup only
- ‚úÖ This file is the single source of truth for all architecture, onboarding, and coding conventions. All documentation and onboarding must reference this file and be updated after any major change.

## üñ•Ô∏è Windows-Only Native Application
- This project is a **native Windows desktop application** (no Docker/devcontainer).
- All development, build, and deployment targets Windows 10/11 (x64).
- Production deployment is via Windows .exe and MSI installer (no containerization).

## üìö Required Documentation Context
- **ALWAYS include:**
  - `PROJECT_CONTEXT.md` (master project overview - CRITICAL)
  - `README.md` (Windows installation, quick start)
  - `.cursor/rules/context.mdc` (this file - context rules)
  - `docs/README.md` (documentation navigation)
  - All relevant `.md` files in `docs/`, especially:
    - `FLAG_MANAGEMENT_SYSTEM.md`
    - `development/AI_AGENT_WINDOWS_GUIDE.md`
    - `project/FLAG_MANAGEMENT_MODULE_PLAN.md`
    - `project/automation-quick-setup.md`
    - `project/github-integration-guide.md`
    - `project/github-integration-status.md`
    - `project/project-management-summary.md`
    - `requirements/software-requirements.md`
    - `requirements/ui-design-document.md`
    - `integration/obs-dual-protocol.md`
    - `integration/obs-websocket-config.md`
    - `development/checklists/DEV-CONTAINER-CHECKLIST-UPDATED.md` (for onboarding, but ignore Docker steps)
  - Chat history from previous sessions

## üèóÔ∏è Architecture & Conventions
- **Backend:** Rust (Tauri plugin architecture, modular, plugin-based)
  - All plugin/core methods use `AppResult<T>` and propagate errors as `AppError`.
  - `AppError::IoError` is ONLY for `std::io::Error`.
  - Custom error messages use `AppError::ConfigError` or other appropriate variant.
  - **Import conventions:**
    - Use `crate::...` for all library code (all files in `src/` except `main.rs`).
    - Use `re_strike_vta::...` only in `main.rs` (binary entrypoint).
  - **Crate name:** Must be snake_case in `Cargo.toml` (`re_strike_vta`).
  - **Module structure:** All plugins in `src/plugins/`, imported via `plugins` module.
- **Frontend:** React 18 + TypeScript + Tailwind CSS + Zustand + Framer Motion
  - Modern, professional UI/UX with keyboard shortcuts, sidebar, overlays.
  - IOC flag system: 253 PNG flags, emoji fallback, React integration (`flagUtils.tsx`).
  - Environment-aware hooks for Windows/web switching.

## üèÅ Flag Management System
- **Status:** COMPLETE (253 IOC flags, emoji fallback, React integration)
- **Python script:** `scripts/media/download_official_ioc_flags.py` (downloads all flags from Wikipedia)
- **React integration:** `ui/src/utils/flagUtils.tsx`, `FlagImage` component, automatic fallback
- **Flag storage:** `ui/public/assets/flags/` (253 PNGs)
- **Documentation:** `docs/FLAG_MANAGEMENT_SYSTEM.md`, `docs/requirements/FLAG_MANAGEMENT_MODULE.md`, `docs/project/FLAG_MANAGEMENT_MODULE_PLAN.md`

## üé• Video, OBS, and PSS Protocols
- **Video:** mpv integration with hardware acceleration, advanced controls
- **OBS:** Dual WebSocket protocol (v4/v5), connection management, scene/recording/streaming control
- **PSS:** Real-time UDP protocol parsing, event types, competition data

## üõ†Ô∏è Environment Setup & Port Cleanup
- **ALWAYS run:** `./scripts/development/cleanup-dev-environment.sh --cleanup` before starting any dev server
  - Frees all ports (3000, 1420, 6000, 4455, 8080)
  - Stops previous processes, clears caches
- **Critical tools:**
  - Node.js 24+ (LTS)
  - Rust (stable, MSVC toolchain)
  - Tauri CLI (`cargo install tauri-cli`)
  - Visual Studio Build Tools (for MSVC)
  - PATH must include Rust, Node, Tauri
- **Frontend dev:** Use `npm run start:tauri` for full app, or `cd ui && npm start` for React only
- **Backend dev:** Use `cargo run` for Rust backend only

## üß™ Testing & Production Deployment
- **Testing priorities:**
  - All React components (VideoClips, Settings, Overlay, ObsWebSocketManager, SidebarTest, etc.)
  - All Rust plugins (plugin_udp.rs, plugin_obs.rs, plugin_playback.rs)
  - Tauri command integration (frontend-backend communication)
  - Real-world competition testing
- **Production build:**
  - Use `cargo tauri build` for Windows .exe
  - MSI installer generation (see deployment docs)

## üóÇÔ∏è Project Management & Automation
- **GitHub project board:** https://github.com/orgs/reStrike-d-o-o/projects/3
- **PAT token:** Added to repo secrets for workflow automation
- **Workflow automation:** Pending (see `docs/project/automation-quick-setup.md`)
- **Issue templates, labels, and project board columns configured**

## üìã Documentation & Onboarding
- **PROJECT_CONTEXT.md** is the master context document (always include)
- **README.md** and all docs/ .md files must be referenced for onboarding
- **Onboarding:**
  - Always include Windows setup, environment, and cleanup steps
  - Ignore/remove Docker/devcontainer steps (not relevant)
  - Reference all flag management, OBS, video, and protocol docs

## ‚ö†Ô∏è Remove/Replace Docker/Devcontainer References
- All Docker/devcontainer steps are obsolete for this project
- All onboarding, context, and documentation must reference Windows-native setup and build only

## üìù Summary
- This is a **Windows-only, production-ready, Rust+React (Tauri) application** for taekwondo competition management
- All context, onboarding, and documentation must reflect:
  - Windows-native build and deployment
  - Modern modular Rust backend (plugin-based, AppResult/AppError, crate naming, import style)
  - React frontend with IOC flag system, advanced UI/UX
  - Complete flag management, video, OBS, and PSS protocol integration
  - GitHub project management, workflow automation, and documentation best practices
- **Always update this file and PROJECT_CONTEXT.md after major milestones, framework updates, or architecture changes.**
