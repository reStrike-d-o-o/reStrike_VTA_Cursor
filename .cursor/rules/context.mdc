# reStrike VTA - Windows-Only Project Context Rules

## Latest Development Status (2025-01-28):
- ‚úÖ Windows-only, production-ready, Rust+React (Tauri) application
- ‚úÖ Docker/devcontainer fully removed from all onboarding, docs, and scripts
- ‚úÖ Modular, plugin-based Rust backend (AppResult/AppError, crate naming, import style)
- ‚úÖ React 18 frontend with IOC flag system, advanced UI/UX
- ‚úÖ All onboarding, build, and documentation reference Windows-native setup only
- ‚úÖ Project structure, naming, and maintenance conventions are strictly enforced (see below)
- ‚úÖ Performance best practices for both frontend and backend are required

---

## 1. File/Directory Structure
- All documentation is organized by category in `docs/` (api, development, project, requirements, integration, etc.)
- All scripts are grouped by purpose in `scripts/` (development, obs, project, media, workflows)
- Rust backend is modular: plugins in `src/plugins/`, commands in `src/commands/`, core logic in `src/core/`
- React frontend is in `ui/` with assets, components, hooks, stores, utils, and config
- Root directory contains only essential files (Cargo.toml, package.json, README.md, etc.)
- All navigation indexes (docs/README.md, scripts/README.md) must be kept up to date

## 2. Naming Conventions
- **Documentation**: `kebab-case.md` (e.g., `container-restart.md`, `software-requirements.md`)
- **Scripts**: `kebab-case.sh` or `kebab-case.py`, grouped in subdirectories by purpose
- **Rust Source**: `snake_case.rs` for modules, `PascalCase` for types/structs/enums, `camelCase` for functions/variables
- **React/TS**: `PascalCase.tsx` for components, `camelCase.ts` for utilities
- **Configuration**: `kebab-case.json` or `kebab-case.toml`

## 3. Maintenance Guidelines
- All new files must follow category and naming conventions
- When moving files, update all imports, documentation links, and configuration paths
- Test all functionality after structural changes
- Monthly structure reviews are required; remove obsolete files and consolidate similar ones
- Keep navigation indexes and cross-references current
- All documentation and onboarding must reference this file and be updated after any major change

## 4. Performance Best Practices
- **Frontend**:
  - Disable source maps in development (`GENERATE_SOURCEMAP=false`)
  - Use Fast Refresh and React.memo for components
  - Disable StrictMode in development for faster renders
  - Optimize imports and bundle size
  - Use fast build/dev scripts (`npm run build:fast`, `npm run start:fast`)
  - Clean caches regularly (`npm run clean:all`)
  - Monitor bundle size (`npm run analyze`)
- **Backend (Rust)**:
  - Use optimized dev profile: `opt-level=1`, `codegen-units=256`, `incremental=true`, `lto=false`
  - Enable incremental compilation and debug assertions
  - Use `./scripts/development/fast-dev.sh` for fast dev cycles
  - Clean build artifacts regularly (`cargo clean`)
  - Monitor build times and optimize as needed
- **General**:
  - Always use fast scripts for development
  - Clean caches and artifacts weekly or when performance degrades
  - Review and optimize imports and dependencies regularly

---

## 5. Single Source of Truth
- This file (`.cursor/rules/context.mdc`) is the **single source of truth** for all project architecture, onboarding, coding, structure, naming, maintenance, and performance conventions.
- All onboarding, build, and documentation must reference this file and be updated after any major change.
- All team members must follow these conventions when adding or modifying files.

---

_Last updated: 2025-01-28_

## üñ•Ô∏è Windows-Only Native Application
- This project is a **native Windows desktop application** (no Docker/devcontainer).
- All development, build, and deployment targets Windows 10/11 (x64).
- Production deployment is via Windows .exe and MSI installer (no containerization).

## üìö Required Documentation Context
- **ALWAYS include:**
  - `PROJECT_CONTEXT.md` (master project overview - CRITICAL)
  - `README.md` (Windows installation, quick start)
  - `.cursor/rules/context.mdc` (this file - context rules)
  - `docs/README.md` (documentation navigation)
  - All relevant `.md` files in `docs/`, especially:
    - `FLAG_MANAGEMENT_SYSTEM.md`
    - `development/AI_AGENT_WINDOWS_GUIDE.md`
    - `project/FLAG_MANAGEMENT_MODULE_PLAN.md`
    - `project/automation-quick-setup.md`
    - `project/github-integration-guide.md`
    - `project/github-integration-status.md`
    - `project/project-management-summary.md`
    - `requirements/software-requirements.md`
    - `requirements/ui-design-document.md`
    - `integration/obs-dual-protocol.md`
    - `integration/obs-websocket-config.md`
    - `development/checklists/DEV-CONTAINER-CHECKLIST-UPDATED.md` (for onboarding, but ignore Docker steps)
  - Chat history from previous sessions

## üèóÔ∏è Architecture & Conventions
- **Backend:** Rust (Tauri plugin architecture, modular, plugin-based)
  - All plugin/core methods use `AppResult<T>` and propagate errors as `AppError`.
  - `AppError::IoError` is ONLY for `std::io::Error`.
  - Custom error messages use `AppError::ConfigError` or other appropriate variant.
  - **Import conventions:**
    - Use `crate::...` for all library code (all files in `src/` except `main.rs`).
    - Use `re_strike_vta::...` only in `main.rs` (binary entrypoint).
  - **Crate name:** Must be snake_case in `Cargo.toml` (`re_strike_vta`).
  - **Module structure:** All plugins in `src/plugins/`, imported via `plugins` module.
- **Frontend:** React 18 + TypeScript + Tailwind CSS + Zustand + Framer Motion
  - Modern, professional UI/UX with keyboard shortcuts, sidebar, overlays.
  - IOC flag system: 253 PNG flags, emoji fallback, React integration (`flagUtils.tsx`).
  - Environment-aware hooks for Windows/web switching.

## üèÅ Flag Management System
- **Status:** COMPLETE (253 IOC flags, emoji fallback, React integration)
- **Python script:** `scripts/media/download_official_ioc_flags.py` (downloads all flags from Wikipedia)
- **React integration:** `ui/src/utils/flagUtils.tsx`, `FlagImage` component, automatic fallback
- **Flag storage:** `ui/public/assets/flags/` (253 PNGs)
- **Documentation:** `docs/FLAG_MANAGEMENT_SYSTEM.md`, `docs/requirements/FLAG_MANAGEMENT_MODULE.md`, `docs/project/FLAG_MANAGEMENT_MODULE_PLAN.md`

## üé• Video, OBS, and PSS Protocols
- **Video:** mpv integration with hardware acceleration, advanced controls
- **OBS:** Dual WebSocket protocol (v4/v5), connection management, scene/recording/streaming control
- **PSS:** Real-time UDP protocol parsing, event types, competition data

## üõ†Ô∏è Environment Setup & Port Cleanup
- **ALWAYS run:** `./scripts/development/cleanup-dev-environment.sh --cleanup` before starting any dev server
  - Frees all ports (3000, 1420, 6000, 4455, 8080)
  - Stops previous processes, clears caches
- **Critical tools:**
  - Node.js 24+ (LTS)
  - Rust (stable, MSVC toolchain)
  - Tauri CLI (`