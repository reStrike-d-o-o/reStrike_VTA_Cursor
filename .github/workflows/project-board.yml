name: Project Board Management

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled]
  pull_request:
    types: [opened, closed, merged, labeled, unlabeled]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Add to project board
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/damjanZGB/projects/1
          github-token: ${{ secrets.PAT_TOKEN }}

  update-status:
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' || github.event.action == 'unlabeled'
    steps:
      - name: Update project status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const { issue, pull_request } = context.payload;
            const item = issue || pull_request;
            const labels = item.labels.map(label => label.name);
            
            // Map labels to project status
            let status = null;
            
            if (labels.includes('status:todo')) {
              status = 'Todo';
            } else if (labels.includes('status:in-progress')) {
              status = 'In Progress';
            } else if (labels.includes('status:review')) {
              status = 'In Review';
            } else if (labels.includes('status:done')) {
              status = 'Done';
            } else if (labels.includes('status:blocked')) {
              status = 'Blocked';
            }
            
            if (status) {
              console.log(`Would update ${item.number} to status: ${status}`);
              // Project board status update would be implemented here
              // This requires the GitHub Project API which is more complex
            }

  close-on-done:
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' && contains(github.event.label.name, 'status:done')
    steps:
      - name: Close completed issues
        uses: actions/github-script@v7
        with:
          script: |
            const { issue } = context.payload;
            
            if (issue && issue.state === 'open') {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'completed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'âœ… **Automatically closed** - Issue marked as completed with `status:done` label.'
              });
            } 